// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4dvBXLce6aZWcodsHuZ7oL
// Component: d77sIRMlxQMG
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import SiteNavBar from "../../SiteNavBar"; // plasmic-import: xamm2QscKBA7/component
import Button2 from "../../Button2"; // plasmic-import: EPGJPtXx-yjL/component
import BaryonFooter from "../../BaryonFooter"; // plasmic-import: FKV3u0E4hZrB/component
import { useScreenVariants as useScreenVariantspcuqpuXkf7V2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PcuqpuXKF7v2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4dvBXLce6aZWcodsHuZ7oL/projectcss
import sty from "./PlasmicStory.module.css"; // plasmic-import: d77sIRMlxQMG/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: F3iOqCFKuA-k/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: IYnmkRggg6dZ/icon

createPlasmicElementProxy;

export const PlasmicStory__VariantProps = new Array();

export const PlasmicStory__ArgProps = new Array();

const $$ = {};

function PlasmicStory__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspcuqpuXkf7V2()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"story"}
          data-plasmic-override={overrides.story}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.story
          )}
        >
          <SiteNavBar
            data-plasmic-name={"siteNavBar"}
            data-plasmic-override={overrides.siteNavBar}
            className={classNames("__wab_instance", sty.siteNavBar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__iIz4L)}>
            <div className={classNames(projectcss.all, sty.freeBox__lsDbK)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0U9BW)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bIUld)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sSbnn)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1W5D
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontStyle: "italic" }}
                        >
                          {"We make sound"}
                        </span>
                        <React.Fragment>{" visible"}</React.Fragment>
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3QJbA
                      )}
                    >
                      {
                        "The world's first 3D cymatics music visualizer  reveals the hidden realm of sound."
                      }
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cr903)}
                  >
                    <Button2
                      data-plasmic-name={"visualizerButton"}
                      data-plasmic-override={overrides.visualizerButton}
                      className={classNames(
                        "__wab_instance",
                        sty.visualizerButton
                      )}
                      color={"white"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__g9Dwo)}
                          role={"img"}
                        />
                      }
                      link={`/visualizer`}
                      onClick={async event => {
                        const $steps = {};
                        $steps["goToHomepage"] = true
                          ? (() => {
                              const actionArgs = { destination: `/visualizer` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHomepage"] != null &&
                          typeof $steps["goToHomepage"] === "object" &&
                          typeof $steps["goToHomepage"].then === "function"
                        ) {
                          $steps["goToHomepage"] = await $steps["goToHomepage"];
                        }
                      }}
                      shape={"rounded"}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__rsYoy)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jFkhu
                        )}
                      >
                        {"Visualizer ->"}
                      </div>
                    </Button2>
                  </Stack__>
                </Stack__>
                <div
                  className={classNames(projectcss.all, sty.freeBox___7QqGr)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1Yw1P)}
                  />
                </div>
              </Stack__>
            </div>
          </div>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"How it all began."}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7Aku7
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h4
                    data-plasmic-name={"h4"}
                    data-plasmic-override={overrides.h4}
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4
                    )}
                  >
                    {"A message from the founder"}
                  </h4>
                }

                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nfmWq
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    'Baryon started from a personal project where I sought to build my life around my passion for playing guitar. After seeing the surge of interest in digital collectibles, I thought, "What if I could paint with my guitar?" This inspired the idea of turning music into art, and my imagination ignited.\n\nI want a future where we can experience the hidden dimension of sound. We physically hear and feel music, but '
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontStyle: "italic" }}
                >
                  {"what if"}
                </span>
                <React.Fragment>
                  {
                    " we could see it too? Sound has shape and form that Baryon is designed to give light to.\n\nMusic is everywhere, waiting to be discovered, and now the boundaries between sound and sight are broken. We are invited to explore a world where music dances before our eyes, painting the air with vibrant patterns and intricate geometries.\n\nWelcome to the future.\n\n\u2014 Kyle Daniel Collins, Founder"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </section>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___3JtRa)}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__lQx7B)}>
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"320px"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: "/assets/plasmic/baryon/images/picnicMagicpng.png",
                    fullWidth: 1024,
                    fullHeight: 1024,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__mYys)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jX1Qq)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"copy"}
                    data-plasmic-override={overrides.copy}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bT5Th)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wEuxi
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          {
                            <h5
                              data-plasmic-name={"h5"}
                              data-plasmic-override={overrides.h5}
                              className={classNames(
                                projectcss.all,
                                projectcss.h5,
                                projectcss.__wab_text,
                                sty.h5
                              )}
                            >
                              {"What if?"}
                            </h5>
                          }

                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f3Qre
                        )}
                      >
                        {"Let's build a world that excites us."}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7FEIq
                        )}
                      >
                        {
                          "At Baryon, we're forging a frontier where music and physics converge, transforming the vibrations of sound into breathtaking visuals that dance before your eyes. \n\nThrough cymatics-based sound visualization and next-generation light projection technology, we plan to captivate audiences and enrich the very fabric of our reality. "
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fkGZq)}
                    >
                      <Button2
                        data-plasmic-name={"pluginButton"}
                        data-plasmic-override={overrides.pluginButton}
                        className={classNames(
                          "__wab_instance",
                          sty.pluginButton
                        )}
                        color={"green"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hhj2R
                            )}
                            role={"img"}
                          />
                        }
                        onClick={async event => {
                          const $steps = {};
                          $steps["goToPlugin"] = true
                            ? (() => {
                                const actionArgs = { destination: `/plugin` };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    location.assign(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToPlugin"] != null &&
                            typeof $steps["goToPlugin"] === "object" &&
                            typeof $steps["goToPlugin"].then === "function"
                          ) {
                            $steps["goToPlugin"] = await $steps["goToPlugin"];
                          }
                        }}
                        shape={"rounded"}
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ywgWq
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mwAm2
                          )}
                        >
                          {"Plugin ->"}
                        </div>
                      </Button2>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </div>
          </Stack__>
          <BaryonFooter
            data-plasmic-name={"baryonFooter"}
            data-plasmic-override={overrides.baryonFooter}
            className={classNames("__wab_instance", sty.baryonFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  story: [
    "story",
    "siteNavBar",
    "visualizerButton",
    "section",
    "h1",
    "h4",
    "columns",
    "img",
    "copy",
    "h5",
    "pluginButton",
    "baryonFooter"
  ],

  siteNavBar: ["siteNavBar"],
  visualizerButton: ["visualizerButton"],
  section: ["section", "h1", "h4"],
  h1: ["h1"],
  h4: ["h4"],
  columns: ["columns", "img", "copy", "h5", "pluginButton"],
  img: ["img"],
  copy: ["copy", "h5", "pluginButton"],
  h5: ["h5"],
  pluginButton: ["pluginButton"],
  baryonFooter: ["baryonFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStory__ArgProps,
          internalVariantPropNames: PlasmicStory__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "story") {
    func.displayName = "PlasmicStory";
  } else {
    func.displayName = `PlasmicStory.${nodeName}`;
  }
  return func;
}

export const PlasmicStory = Object.assign(
  // Top-level PlasmicStory renders the root element
  makeNodeComponent("story"),
  {
    // Helper components rendering sub-elements
    siteNavBar: makeNodeComponent("siteNavBar"),
    visualizerButton: makeNodeComponent("visualizerButton"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    h4: makeNodeComponent("h4"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    copy: makeNodeComponent("copy"),
    h5: makeNodeComponent("h5"),
    pluginButton: makeNodeComponent("pluginButton"),
    baryonFooter: makeNodeComponent("baryonFooter"),
    // Metadata about props expected for PlasmicStory
    internalVariantProps: PlasmicStory__VariantProps,
    internalArgProps: PlasmicStory__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Story",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStory;
/* prettier-ignore-end */
