// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4dvBXLce6aZWcodsHuZ7oL
// Component: bAZ4JfZdLiyz
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import SkeumorphicToggle from "../../SkeumorphicToggle"; // plasmic-import: lMG1kVVdP4CO/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4dvBXLce6aZWcodsHuZ7oL/projectcss
import sty from "./PlasmicMicButton.module.css"; // plasmic-import: bAZ4JfZdLiyz/css
import MicIcon from "./icons/PlasmicIcon__Mic"; // plasmic-import: EDHolNKKEZHH/icon

createPlasmicElementProxy;

export const PlasmicMicButton__VariantProps = new Array();

export const PlasmicMicButton__ArgProps = new Array();

const $$ = {};

function PlasmicMicButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"micButton"}
      data-plasmic-override={overrides.micButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.micButton
      )}
    >
      <SkeumorphicToggle
        data-plasmic-name={"skeumorphicToggle"}
        data-plasmic-override={overrides.skeumorphicToggle}
        className={classNames("__wab_instance", sty.skeumorphicToggle)}
      />

      <div
        data-plasmic-name={"micNaming"}
        data-plasmic-override={overrides.micNaming}
        className={classNames(projectcss.all, sty.micNaming)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"MIC"}
        </div>
        <MicIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  micButton: ["micButton", "skeumorphicToggle", "micNaming", "text", "svg"],
  skeumorphicToggle: ["skeumorphicToggle"],
  micNaming: ["micNaming", "text", "svg"],
  text: ["text"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMicButton__ArgProps,
          internalVariantPropNames: PlasmicMicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "micButton") {
    func.displayName = "PlasmicMicButton";
  } else {
    func.displayName = `PlasmicMicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicMicButton = Object.assign(
  // Top-level PlasmicMicButton renders the root element
  makeNodeComponent("micButton"),
  {
    // Helper components rendering sub-elements
    skeumorphicToggle: makeNodeComponent("skeumorphicToggle"),
    micNaming: makeNodeComponent("micNaming"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicMicButton
    internalVariantProps: PlasmicMicButton__VariantProps,
    internalArgProps: PlasmicMicButton__ArgProps
  }
);

export default PlasmicMicButton;
/* prettier-ignore-end */
