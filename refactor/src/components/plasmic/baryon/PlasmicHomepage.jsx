// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4dvBXLce6aZWcodsHuZ7oL
// Component: hWA73xpE070V
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import SiteNavBar from "../../SiteNavBar"; // plasmic-import: xamm2QscKBA7/component
import MicButton from "../../MicButton"; // plasmic-import: bAZ4JfZdLiyz/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4dvBXLce6aZWcodsHuZ7oL/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: hWA73xpE070V/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"visualizerDesktop"}
          data-plasmic-override={overrides.visualizerDesktop}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.visualizerDesktop
          )}
        >
          <SiteNavBar
            data-plasmic-name={"siteNavBar"}
            data-plasmic-override={overrides.siteNavBar}
            className={classNames("__wab_instance", sty.siteNavBar)}
          />

          <section className={classNames(projectcss.all, sty.section__eIkRz)}>
            <section className={classNames(projectcss.all, sty.section__l8Uru)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"modeSettings"}
                data-plasmic-override={overrides.modeSettings}
                hasGap={true}
                className={classNames(projectcss.all, sty.modeSettings)}
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"MODES"}
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"modeNames"}
                  data-plasmic-override={overrides.modeNames}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.modeNames)}
                  id={"micMode"}
                >
                  <MicButton
                    data-plasmic-name={"micButton"}
                    data-plasmic-override={overrides.micButton}
                    className={classNames("__wab_instance", sty.micButton)}
                  />
                </Stack__>
              </Stack__>
            </section>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  visualizerDesktop: [
    "visualizerDesktop",
    "siteNavBar",
    "modeSettings",
    "text",
    "modeNames",
    "micButton"
  ],

  siteNavBar: ["siteNavBar"],
  modeSettings: ["modeSettings", "text", "modeNames", "micButton"],
  text: ["text"],
  modeNames: ["modeNames", "micButton"],
  micButton: ["micButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "visualizerDesktop") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("visualizerDesktop"),
  {
    // Helper components rendering sub-elements
    siteNavBar: makeNodeComponent("siteNavBar"),
    modeSettings: makeNodeComponent("modeSettings"),
    text: makeNodeComponent("text"),
    modeNames: makeNodeComponent("modeNames"),
    micButton: makeNodeComponent("micButton"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Visualizer",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
