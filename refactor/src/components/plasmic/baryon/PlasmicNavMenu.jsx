// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4dvBXLce6aZWcodsHuZ7oL
// Component: T3nFQfxBWEpV
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4dvBXLce6aZWcodsHuZ7oL/projectcss
import sty from "./PlasmicNavMenu.module.css"; // plasmic-import: T3nFQfxBWEpV/css
import BaryonLogoWhite1Icon from "./icons/PlasmicIcon__BaryonLogoWhite1"; // plasmic-import: reN7qi7eBogy/icon
import XCircleFillsvgIcon from "./icons/PlasmicIcon__XCircleFillsvg"; // plasmic-import: KH57KApp2tIC/icon
import VisionIcon from "./icons/PlasmicIcon__Vision"; // plasmic-import: TyBRaZiGlauo/icon
import PlugIconIcon from "./icons/PlasmicIcon__PlugIcon"; // plasmic-import: Sp76hJMCU4CF/icon
import OpenBookIconIcon from "./icons/PlasmicIcon__OpenBookIcon"; // plasmic-import: v1mcrSsX0Dl9/icon
import ArtIconIcon from "./icons/PlasmicIcon__ArtIcon"; // plasmic-import: d5pz69rrBj3o/icon

createPlasmicElementProxy;

export const PlasmicNavMenu__VariantProps = new Array();

export const PlasmicNavMenu__ArgProps = new Array();

const $$ = {};

function PlasmicNavMenu__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"mobileMenu"}
        data-plasmic-override={overrides.mobileMenu}
        className={classNames(projectcss.all, sty.mobileMenu)}
      >
        <div
          data-plasmic-name={"navigation"}
          data-plasmic-override={overrides.navigation}
          className={classNames(projectcss.all, sty.navigation)}
        >
          <div
            data-plasmic-name={"nav"}
            data-plasmic-override={overrides.nav}
            className={classNames(projectcss.all, sty.nav)}
          >
            <div
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames(projectcss.all, sty.logo)}
            >
              <BaryonLogoWhite1Icon
                className={classNames(projectcss.all, sty.svg__tmzDv)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bMjLz
                )}
              >
                {"Baryon"}
              </div>
            </div>
            <XCircleFillsvgIcon
              className={classNames(projectcss.all, sty.svg__upTc)}
              role={"img"}
            />
          </div>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"tabs"}
          data-plasmic-override={overrides.tabs}
          hasGap={true}
          className={classNames(projectcss.all, sty.tabs)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"visualizerGroup"}
            data-plasmic-override={overrides.visualizerGroup}
            hasGap={true}
            className={classNames(projectcss.all, sty.visualizerGroup)}
          >
            <VisionIcon
              className={classNames(projectcss.all, sty.svg__zTrO)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xIbnX
              )}
            >
              {"VISUALIZER"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"pluginGroup"}
            data-plasmic-override={overrides.pluginGroup}
            hasGap={true}
            className={classNames(projectcss.all, sty.pluginGroup)}
          >
            <PlugIconIcon
              className={classNames(projectcss.all, sty.svg__oudyk)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3XdGf
              )}
            >
              {"PLUGIN"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"storyGroup"}
            data-plasmic-override={overrides.storyGroup}
            hasGap={true}
            className={classNames(projectcss.all, sty.storyGroup)}
          >
            <OpenBookIconIcon
              className={classNames(projectcss.all, sty.svg__fvV9)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sdbz2
              )}
            >
              {"STORY"}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"artGroup"}
            data-plasmic-override={overrides.artGroup}
            hasGap={true}
            className={classNames(projectcss.all, sty.artGroup)}
          >
            <ArtIconIcon
              className={classNames(projectcss.all, sty.svg__rauh5)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mHnH4
              )}
            >
              {"ART"}
            </div>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "mobileMenu",
    "navigation",
    "nav",
    "logo",
    "tabs",
    "visualizerGroup",
    "pluginGroup",
    "storyGroup",
    "artGroup"
  ],

  mobileMenu: [
    "mobileMenu",
    "navigation",
    "nav",
    "logo",
    "tabs",
    "visualizerGroup",
    "pluginGroup",
    "storyGroup",
    "artGroup"
  ],

  navigation: ["navigation", "nav", "logo"],
  nav: ["nav", "logo"],
  logo: ["logo"],
  tabs: ["tabs", "visualizerGroup", "pluginGroup", "storyGroup", "artGroup"],
  visualizerGroup: ["visualizerGroup"],
  pluginGroup: ["pluginGroup"],
  storyGroup: ["storyGroup"],
  artGroup: ["artGroup"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavMenu__ArgProps,
          internalVariantPropNames: PlasmicNavMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavMenu";
  } else {
    func.displayName = `PlasmicNavMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicNavMenu = Object.assign(
  // Top-level PlasmicNavMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mobileMenu: makeNodeComponent("mobileMenu"),
    navigation: makeNodeComponent("navigation"),
    nav: makeNodeComponent("nav"),
    logo: makeNodeComponent("logo"),
    tabs: makeNodeComponent("tabs"),
    visualizerGroup: makeNodeComponent("visualizerGroup"),
    pluginGroup: makeNodeComponent("pluginGroup"),
    storyGroup: makeNodeComponent("storyGroup"),
    artGroup: makeNodeComponent("artGroup"),
    // Metadata about props expected for PlasmicNavMenu
    internalVariantProps: PlasmicNavMenu__VariantProps,
    internalArgProps: PlasmicNavMenu__ArgProps
  }
);

export default PlasmicNavMenu;
/* prettier-ignore-end */
