// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4dvBXLce6aZWcodsHuZ7oL
// Component: dfiZXaS0blw8
import * as React from "react";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button2 from "../../Button2"; // plasmic-import: EPGJPtXx-yjL/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4dvBXLce6aZWcodsHuZ7oL/projectcss
import sty from "./PlasmicMobileMenu.module.css"; // plasmic-import: dfiZXaS0blw8/css
import BaryonLogoWhite1Icon from "./icons/PlasmicIcon__BaryonLogoWhite1"; // plasmic-import: reN7qi7eBogy/icon
import HamburgerMenuSvgrepoComsvgIcon from "./icons/PlasmicIcon__HamburgerMenuSvgrepoComsvg"; // plasmic-import: yQSNegzl0PI8/icon

createPlasmicElementProxy;

export const PlasmicMobileMenu__VariantProps = new Array();

export const PlasmicMobileMenu__ArgProps = new Array();

const $$ = {};

function PlasmicMobileMenu__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const [isRootFocusWithin, triggerRootFocusWithinProps] = useTrigger(
    "useFocusedWithin",
    {}
  );
  const triggers = {
    focusWithin_root: isRootFocusWithin
  };
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootFocusWithinProps]}
    >
      <BaryonLogoWhite1Icon
        className={classNames(projectcss.all, sty.svg__b1Snf)}
        role={"img"}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
        tabIndex={0}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__smwVs
          )}
          onClick={async event => {
            const $steps = {};
            $steps["goToHomepage"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      location.assign(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHomepage"] != null &&
              typeof $steps["goToHomepage"] === "object" &&
              typeof $steps["goToHomepage"].then === "function"
            ) {
              $steps["goToHomepage"] = await $steps["goToHomepage"];
            }
          }}
        >
          {"Visualizer"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___4I3Y
          )}
          onClick={async event => {
            const $steps = {};
            $steps["goToPlugin"] = true
              ? (() => {
                  const actionArgs = { destination: `/plugin` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      location.assign(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPlugin"] != null &&
              typeof $steps["goToPlugin"] === "object" &&
              typeof $steps["goToPlugin"].then === "function"
            ) {
              $steps["goToPlugin"] = await $steps["goToPlugin"];
            }
          }}
        >
          {"Plugin"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lSrV
          )}
          onClick={async event => {
            const $steps = {};
            $steps["goToStory"] = true
              ? (() => {
                  const actionArgs = { destination: `/story` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      location.assign(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToStory"] != null &&
              typeof $steps["goToStory"] === "object" &&
              typeof $steps["goToStory"].then === "function"
            ) {
              $steps["goToStory"] = await $steps["goToStory"];
            }
          }}
        >
          {"Story"}
        </div>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link
          )}
          href={"https://foundation.app/@Baryon"}
          platform={"react"}
          target={"_blank"}
        >
          {"Art"}
        </PlasmicLink__>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bqkk9
          )}
          onClick={async event => {
            const $steps = {};
            $steps["goToPage"] = true
              ? (() => {
                  const actionArgs = {};
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      location.assign(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPage"] != null &&
              typeof $steps["goToPage"] === "object" &&
              typeof $steps["goToPage"].then === "function"
            ) {
              $steps["goToPage"] = await $steps["goToPage"];
            }
          }}
        >
          {"Art"}
        </div>
      </Stack__>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__vBpFy
        )}
      >
        {"Baryon"}
      </div>
      <Button2
        data-plasmic-name={"button2"}
        data-plasmic-override={overrides.button2}
        className={classNames("__wab_instance", sty.button2)}
        color={"clear"}
      >
        <HamburgerMenuSvgrepoComsvgIcon
          className={classNames(projectcss.all, sty.svg___7KlJh)}
          role={"img"}
        />
      </Button2>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "link", "button2"],
  freeBox: ["freeBox", "link"],
  link: ["link"],
  button2: ["button2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMobileMenu__ArgProps,
          internalVariantPropNames: PlasmicMobileMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMobileMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileMenu";
  } else {
    func.displayName = `PlasmicMobileMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileMenu = Object.assign(
  // Top-level PlasmicMobileMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    link: makeNodeComponent("link"),
    button2: makeNodeComponent("button2"),
    // Metadata about props expected for PlasmicMobileMenu
    internalVariantProps: PlasmicMobileMenu__VariantProps,
    internalArgProps: PlasmicMobileMenu__ArgProps
  }
);

export default PlasmicMobileMenu;
/* prettier-ignore-end */
