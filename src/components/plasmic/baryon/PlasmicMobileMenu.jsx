// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4dvBXLce6aZWcodsHuZ7oL
// Component: dfiZXaS0blw8
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button2 from "../../Button2"; // plasmic-import: EPGJPtXx-yjL/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4dvBXLce6aZWcodsHuZ7oL/projectcss
import sty from "./PlasmicMobileMenu.module.css"; // plasmic-import: dfiZXaS0blw8/css
import BaryonLogoWhite1Icon from "./icons/PlasmicIcon__BaryonLogoWhite1"; // plasmic-import: reN7qi7eBogy/icon

createPlasmicElementProxy;

export const PlasmicMobileMenu__VariantProps = new Array();

export const PlasmicMobileMenu__ArgProps = new Array();

const $$ = {};

function PlasmicMobileMenu__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__mhOq)}>
        <BaryonLogoWhite1Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vBpFy
          )}
        >
          {"Baryon"}
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__giyLj)}
      >
        <Button2
          className={classNames("__wab_instance", sty.button2__hd4G)}
          color={"clear"}
          link={`/`}
          shape={"rounded"}
          size={"compact"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___50Gvn
            )}
          >
            {"Visualizer"}
          </div>
        </Button2>
        <Button2
          className={classNames("__wab_instance", sty.button2___1ZaxA)}
          color={"clear"}
          link={`/plugin`}
          shape={"rounded"}
          size={"compact"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tZOyT
            )}
          >
            {"Plugin"}
          </div>
        </Button2>
        <Button2
          className={classNames("__wab_instance", sty.button2__qCCs)}
          color={"clear"}
          link={`/story`}
          shape={"rounded"}
          size={"compact"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2GkMw
            )}
          >
            {"Story"}
          </div>
        </Button2>
        <Button2
          className={classNames("__wab_instance", sty.button2__dn2Pb)}
          color={"clear"}
          link={"https://foundation.app/@Baryon"}
          shape={"rounded"}
          size={"compact"}
          target={true}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vTmR5
            )}
          >
            {"Art"}
          </div>
        </Button2>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMobileMenu__ArgProps,
          internalVariantPropNames: PlasmicMobileMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMobileMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileMenu";
  } else {
    func.displayName = `PlasmicMobileMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileMenu = Object.assign(
  // Top-level PlasmicMobileMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicMobileMenu
    internalVariantProps: PlasmicMobileMenu__VariantProps,
    internalArgProps: PlasmicMobileMenu__ArgProps
  }
);

export default PlasmicMobileMenu;
/* prettier-ignore-end */
