// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4dvBXLce6aZWcodsHuZ7oL
// Component: hWA73xpE070V
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import SiteNavBar from "../../SiteNavBar"; // plasmic-import: xamm2QscKBA7/component
import Switch from "../../Switch"; // plasmic-import: nvHlc0ztf3Mh/component
import { useScreenVariants as useScreenVariantspcuqpuXkf7V2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PcuqpuXKF7v2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4dvBXLce6aZWcodsHuZ7oL/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: hWA73xpE070V/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "_switch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspcuqpuXkf7V2()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"visualizerDesktop"}
          data-plasmic-override={overrides.visualizerDesktop}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.visualizerDesktop
          )}
        >
          <SiteNavBar
            data-plasmic-name={"siteNavBar"}
            data-plasmic-override={overrides.siteNavBar}
            className={classNames("__wab_instance", sty.siteNavBar)}
          />

          {false ? (
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <section
                  data-plasmic-name={"micModeToggle"}
                  data-plasmic-override={overrides.micModeToggle}
                  className={classNames(projectcss.all, sty.micModeToggle)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"modeSettings"}
                    data-plasmic-override={overrides.modeSettings}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.modeSettings)}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"MODES"}
                    </div>
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"modeNames"}
                      data-plasmic-override={overrides.modeNames}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.modeNames)}
                      id={"micMode"}
                    >
                      <Switch
                        data-plasmic-name={"_switch"}
                        data-plasmic-override={overrides._switch}
                        className={classNames("__wab_instance", sty._switch)}
                        isChecked={
                          generateStateValueProp($state, [
                            "_switch",
                            "isChecked"
                          ]) ?? false
                        }
                        onChange={async (...eventArgs) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "_switch",
                              "isChecked"
                            ])(eventArgs[0]);
                          }).apply(null, eventArgs);
                          (async isChecked => {
                            const $steps = {};
                            $steps["updateSwitchIsChecked"] = false
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["_switch", "isChecked"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;
                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateSwitchIsChecked"] != null &&
                              typeof $steps["updateSwitchIsChecked"] ===
                                "object" &&
                              typeof $steps["updateSwitchIsChecked"].then ===
                                "function"
                            ) {
                              $steps["updateSwitchIsChecked"] = await $steps[
                                "updateSwitchIsChecked"
                              ];
                            }
                          }).apply(null, eventArgs);
                        }}
                      />
                    </Stack__>
                  </Stack__>
                </section>
              ) : null}
            </section>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  visualizerDesktop: [
    "visualizerDesktop",
    "siteNavBar",
    "section",
    "micModeToggle",
    "modeSettings",
    "text",
    "modeNames",
    "_switch"
  ],

  siteNavBar: ["siteNavBar"],
  section: [
    "section",
    "micModeToggle",
    "modeSettings",
    "text",
    "modeNames",
    "_switch"
  ],

  micModeToggle: [
    "micModeToggle",
    "modeSettings",
    "text",
    "modeNames",
    "_switch"
  ],

  modeSettings: ["modeSettings", "text", "modeNames", "_switch"],
  text: ["text"],
  modeNames: ["modeNames", "_switch"],
  _switch: ["_switch"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "visualizerDesktop") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("visualizerDesktop"),
  {
    // Helper components rendering sub-elements
    siteNavBar: makeNodeComponent("siteNavBar"),
    section: makeNodeComponent("section"),
    micModeToggle: makeNodeComponent("micModeToggle"),
    modeSettings: makeNodeComponent("modeSettings"),
    text: makeNodeComponent("text"),
    modeNames: makeNodeComponent("modeNames"),
    _switch: makeNodeComponent("_switch"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Homepage",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
