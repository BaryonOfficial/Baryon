// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4dvBXLce6aZWcodsHuZ7oL
// Component: X6F2UQJmqAhS
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: gPE0fa_Hm6Wn/component
import { useScreenVariants as useScreenVariantspcuqpuXkf7V2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: PcuqpuXKF7v2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 4dvBXLce6aZWcodsHuZ7oL/projectcss
import sty from "./PlasmicMenuButton2.module.css"; // plasmic-import: X6F2UQJmqAhS/css
import HamburgerMenuSvgrepoComSvgIcon from "./icons/PlasmicIcon__HamburgerMenuSvgrepoComSvg"; // plasmic-import: yQSNegzl0PI8/icon

createPlasmicElementProxy;

export const PlasmicMenuButton2__VariantProps = new Array();

export const PlasmicMenuButton2__ArgProps = new Array();

const $$ = {};

function PlasmicMenuButton2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspcuqpuXkf7V2()
  });
  return (
    <Button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
    >
      <HamburgerMenuSvgrepoComSvgIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />
    </Button>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuButton2__ArgProps,
          internalVariantPropNames: PlasmicMenuButton2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuButton2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuButton2";
  } else {
    func.displayName = `PlasmicMenuButton2.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuButton2 = Object.assign(
  // Top-level PlasmicMenuButton2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicMenuButton2
    internalVariantProps: PlasmicMenuButton2__VariantProps,
    internalArgProps: PlasmicMenuButton2__ArgProps
  }
);

export default PlasmicMenuButton2;
/* prettier-ignore-end */
